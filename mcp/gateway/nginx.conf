events {
    worker_connections 1024;
}

http {
    upstream fileio_mcp {
        server fileio:8000;
    }

    upstream python_mcp {
        server python:8002;
    }

    upstream search_mcp {
        server search:8003;
    }

    upstream mongo_mcp {
        server mcpmongo:8004;
    }

    # Future MCP servers can be added here
    # upstream n8n_control_mcp {
    #     server n8n-control-mcp:8000;
    # }

    server {
        listen 80;
        server_name localhost;

        # Logging
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;

        # Health check endpoint
        location /health {
            return 200 "MCP Gateway OK\n";
            add_header Content-Type text/plain;
        }

        # FileIO MCP Server
        location /fileio/ {
            proxy_pass http://fileio_mcp/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket support (if needed for MCP)
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # Python ToolSession MCP Server
        location /python/ {
            proxy_pass http://python_mcp/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket support (if needed for MCP)
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # Search MCP Server
        location /search/ {
            proxy_pass http://search_mcp/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket support (if needed for MCP)
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # MongoDB MCP Server
        location /mongo/ {
            proxy_pass http://mongo_mcp/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket support (if needed for MCP)
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # Future MCP servers
        # location /n8n-control/ {
        #     proxy_pass http://n8n_control_mcp/;
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_set_header X-Forwarded-Proto $scheme;
        # }

        # Default route - list available MCP servers
        location / {
            return 200 "Available MCP Servers:\n- /fileio/ - File operations for n8n workflows\n- /python/ - Interactive Python tool sessions\n- /search/ - Web search and content extraction\n- /mongo/ - MongoDB database operations\n- /health - Gateway health check\n";
            add_header Content-Type text/plain;
        }
    }
}