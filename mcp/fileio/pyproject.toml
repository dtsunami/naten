[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "fileio-mcp"
version = "1.0.0"
description = "MCP Server for n8n workflow file operations"
authors = [{name = "n8n Stack", email = "admin@n8nstack.local"}]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
dependencies = [
    "mcp>=1.0.0",
    "pydantic>=2.0.0",
    "typing-extensions>=4.0.0",
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "motor>=3.3.0",
    "pymongo>=4.6.0",
    "python-dotenv>=1.0.0"
]


[project.urls]
Repository = "https://github.com/dtsunami/naten.git"

[project.optional-dependencies]
# Development dependencies (includes testing, linting, formatting)
dev = [
    # Core testing framework
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "pytest-benchmark>=4.0.0",
    "pytest-html>=3.2.0",
    "pytest-mock>=3.11.0",

    # HTTP testing
    "httpx>=0.24.0",
    "respx>=0.20.0",

    # Testing utilities
    "freezegun>=1.2.0",

    # Code formatting and linting
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "ruff>=0.1.0",

    # Security scanning
    "bandit>=1.7.0",
    "safety>=2.3.0",

    # Development tools
    "pre-commit>=3.3.0",
    "pytest-watch>=4.2.0"
]

# Testing-only dependencies (lighter for CI)
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "httpx>=0.24.0",
    "pytest-mock>=3.11.0"
]

# Performance testing
performance = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-benchmark>=4.0.0",
    "locust>=2.15.0"
]

# Production deployment
prod = [
    # Production-specific dependencies if needed
]

[project.scripts]
fileio-mcp = "server:main"

[tool.setuptools]
packages = []
py-modules = ["server", "models", "utils", "file_ops", "directory_ops"]

# Tool configurations
[tool.black]
line-length = 88
target-version = ["py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # Exclude build artifacts
  \.eggs
  | \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.ruff_cache
  | __pycache__
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.ruff]
line-length = 88
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["N802", "N803", "N806"]  # Allow various naming in tests

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--strict-config",
    "--tb=short",
    "--maxfail=5",
    "--durations=10",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "performance: Performance tests",
    "slow: Tests that take more than 5 seconds",
    "network: Tests that require network access",
    "docker: Tests that require Docker",
    "mongodb: Tests that require MongoDB",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "venv/*",
    ".venv/*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_parameterized

[tool.bandit.assert_used]
skips = ["**/test_*.py", "**/tests/**"]